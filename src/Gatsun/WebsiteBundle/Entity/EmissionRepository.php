<?php

namespace Gatsun\WebsiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * EmissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmissionRepository extends EntityRepository
{
    public function getNextEmissions($count, $current = true)
    {
        // Récupération des émissions suivantes (semaine courante)
        $qb = $this->createQueryBuilder('e');
        $listeEmissions = $qb->where('e.active = TRUE')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        // Le jour est aujourd'hui
                        $qb->expr()->eq('e.jour', ':jour'),
                        // ET l'émission n'est pas terminée / en cours
                        $qb->expr()->gte(($current ? 'e.heureFin' : 'e.heureDebut'), ':heure')
                    ),
                    // OU Le jour est plus tard
                    $qb->expr()->gte('e.jour', ':jour')
                )
            )
            ->setParameter('jour', date('N'))
            ->setParameter('heure', date('H:i'))
            ->orderBy('e.jour')
            ->addOrderBy('e.heureDebut')
            ->setMaxResults($count)
            ->getQuery()
            ->getResult();


        if (sizeof($listeEmissions) < $count) {
            // Pas assez d'émissions avant la fin de la semaine
            // Prendre les premières de la semaine suivante.
            $listeEmissions = array_merge(
                $listeEmissions,
                $this->createQueryBuilder('e')
                    ->where('e.jour IS NOT NULL')
                    ->andWhere('e.active = TRUE')
                    ->orderBy('e.jour')
                    ->addOrderBy('e.heureDebut')
                    ->setMaxResults($count - sizeof($listeEmissions))
                    ->getQuery()
                    ->getResult()
            );
        }

        return $listeEmissions;

    }

    public function getCurrentEmission()
    {
        try {
            return $this->createQueryBuilder('e')
                ->where('e.jour = :jour')
                ->andWhere('e.heureDebut <= :heure')
                ->andWhere('e.heureFin >= :heure')
                ->andWhere('e.active = TRUE')
                ->setParameter('jour', date('N'))
                ->setParameter('heure', date('H:i'))
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }
}
